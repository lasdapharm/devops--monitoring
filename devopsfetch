#!/bin/bash
# Helper function for displaying usage
show_help() {
  echo "Usage: devopsfetch [OPTION]..."
  echo "Options:"
  echo "  -p, --port [PORT_NUMBER]   Display all active ports or detailed information about a specific port."
  echo "  -d, --docker [CONTAINER]   List all Docker images and containers or detailed information about a specific container."
  echo "  -n, --nginx [DOMAIN]       Display all Nginx domains and their ports or detailed configuration information for a specific domain."
  echo "  -u, --users [USERNAME]     List all users and their last login times or detailed information about a specific user."
  echo "  -t, --time                 Display activities within a specified time range."
  echo "  -h, --help                 Display this help and exit."
}



# Function to display active ports and services
display_ports() {
    if [ -z "$1" ]; then
        echo -e "\033[1m| USER       | PORT     | SERVICE   |\033[0m"
        sudo netstat -tuln | awk 'NR>2 {split($4, a, ":"); port=a[length(a)]; print port, $1}' | while read -r port protocol; do
            service=$(sudo lsof -i :"$port" | awk 'NR==2 {print $1}')
            user=$(sudo lsof -i :"$port" | awk 'NR==2 {print $3}')
            printf "| %-10s | %-10s | %-9s |\n" "$user" "$port" "$service"
        done
    else
        echo -e "\033[1m| USER       | PORT     | SERVICE   |\033[0m"
        sudo netstat -tuln | awk -v port="$1" 'NR>2 {split($4, a, ":"); if (a[length(a)] == port) print port, $1}' | while read -r port protocol; do
            service=$(sudo lsof -i :"$port" | awk 'NR==2 {print $1}')
            user=$(sudo lsof -i :"$port" | awk 'NR==2 {print $3}')
            printf "| %-10s | %-10s | %-9s |\n" "$user" "$port" "$service"
        done
    fi
}

# Function to list all Docker images and containers
list_docker() {
    if [ -z "$1" ]; then
        echo "Docker Images:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.Size}}"
        echo "Docker Containers:"
        docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
    else
        echo "Details for Container $1:"
        docker inspect "$1"
    fi
}

display_nginx() {
    NGINX_CONF_DIR="/etc/nginx/sites-enabled"
    if [ -z "$1" ]; then
        echo "Nginx Domains and Ports:"
        awk 'BEGIN {
            printf "+--------------------------------------+----------------------------+------------------------------------------------------+\n";
            printf "| %-36s | %-26s | %-52s |\n", "Server Name", "Proxy", "Configuration File";
            printf "+--------------------------------------+----------------------------+------------------------------------------------------+\n";
        }'
        for conf_file in "$NGINX_CONF_DIR"/*; do
            if [ -f "$conf_file" ]; then
                server_names=$(grep -E "^\s*server_name" "$conf_file" | awk '{print $2}')
                proxy_pass=$(grep -E "^\s*proxy_pass" "$conf_file" | awk '{print $2}')
                for server_name in $server_names; do
                    if [ -n "$server_name" ]; then
                        if [ -z "$proxy_pass" ]; then
                            proxy_pass="no proxy"
                        fi
                        printf "| %-36s | %-26s | %-52s |\n" "$server_name" "$proxy_pass" "$conf_file"
                    fi
                done
            fi
        done | awk '{
            print $0;
            printf "+--------------------------------------+----------------------------+------------------------------------------------------+\n";
        }'
    else
        echo "Configuration for Domain $1:"
        awk -v domain="$1" '
        BEGIN {
            found = 0;
            FS=":";
            printf "+--------------------------------------------------------------------------------------------------+\n";
        }
        /server_name/ {
            if ($0 ~ domain) {
                found = 1;
            }
        }
        found {
            print "| " $0 " |";
        }
        END {
            if (found) {
                printf "+--------------------------------------------------------------------------------------------------+\n";
            } else {
                print "No configuration found for domain: " domain;
            }
        }' $(grep -rl "server_name .*${1}" "$NGINX_CONF_DIR")
    fi
}



# Function to list users with their last login details
list_users() {
    echo "Username    Terminal  IP Address          Last Login"
    echo "-------------------------------------------------------------"
    awk -F: '($3 >= 1000) && ($3 != 65534) {print $1}' /etc/passwd | while read -r user; do
        last_info=$(lastlog -u "$user" | tail -n 1)
        if [[ $last_info != *"Never logged in"* ]]; then
            username=$(echo "$last_info" | awk '{print $1}')
            terminal=$(echo "$last_info" | awk '{print $2}')
            ip_address=$(echo "$last_info" | awk '{print $3}')
            last_login=$(echo "$last_info" | awk '{$1=$2=$3=""; print $0}' | sed 's/^ *//')
            printf "%-10s  %-8s  %-20s  %s\n" "$username" "$terminal" "$ip_address" "$last_login"
        fi
    done
}
# Function to provide detailed information about a specific user
user_info() {
    local username="$1"
    if id "$username" &>/dev/null; then
        echo "Detailed information for user: $username"
        echo "User ID: $(id -u "$username")"
        echo "Group ID: $(id -g "$username")"
        echo "Home Directory: $(getent passwd "$username" | cut -d: -f6)"
        echo "Shell: $(getent passwd "$username" | cut -d: -f7)"
        lastlog -u "$username"
    else
        echo "User '$username' does not exist."
        echo "  If only <start_date> is provided, activities for that date will be displayed."
    fi
}
# Display activities within a specified time range
time_range() {
    echo -e "\033[1m| TIMESTAMP                   | USER  | ACTIVITY               |\033[0m"
    echo "---------------------------------------------------------------"
    journalctl --since="$1" --until="$2" --output=short-iso | while read line; do
        timestamp=$(echo $line | awk '{print $1, $2}')
        user=$(echo $line | awk '{print $6}')
        activity=$(echo $line | awk '{print $7, $8, $9, $10}')
        printf "| %-26s | %-5s | %-20s |\n" "$timestamp" "$user" "$activity"
    done
}
# Function to display activities within a specified time range
display_time_range() {
    if [ "$#" -eq 1 ]; then
        # Single date specified
        start_date="$1"
        end_date="$1"
        echo "Displaying Activities on $start_date:"
    elif [ "$#" -eq 2 ]; then
        # Date range specified
        start_date="$1"
        end_date="$2"
        echo "Displaying Activities from $start_date to $end_date:"
    else
        echo "Usage: display_time_range <start_date> [end_date]"
        echo "  <start_date> and <end_date> should be in 'YYYY-MM-DD' format."
        return
    fi

    journalctl --since="$start_date 00:00:00" --until="$end_date 23:59:59"
}



# Main function to handle input arguments
main() {
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -h|--help)
                shift
                show_help "$1"
                shift
                ;;
            -p|--port)
                shift
                display_ports "$1"
                shift
                ;;
            -d|--docker)
                shift
                list_docker "$1"
                shift
                ;;
            -n|--nginx)
                shift
                display_nginx "$1"
                shift
                ;;
            -u|--users)
                shift
                list_users "$1"
                shift
                ;;
            -t|--time)
                shift
                display_time_range "$1" "$2"
                shift 2
                ;;
            *)
                echo "Invalid option: $1"
                exit 1
                ;;
        esac
    done
}

# Execute main function with input arguments
main "$@"

